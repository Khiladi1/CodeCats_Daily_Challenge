203. Remove Linked List Elements


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        
        if(head==NULL)
        return head;

        while(head && head->val==val){
            head = head->next;
        }
        ListNode *ptr=head;
        while(ptr && ptr->next)
        {
            if(ptr->next->val==val)
            {
                ptr->next=ptr->next->next;
            }
            else
            ptr=ptr->next;

        }
         return head;

    }
};








148. Sort List


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        // ListNode* ptr=head;
        // vector<int> v;
        // while(ptr){
        //     v.push_back(ptr->val);
        //     ptr=ptr->next;
        // }
        // sort(v.begin(),v.end());
        // ptr=head;
        // int i=0;
        // while(i<v.size()){
        //     ptr->val=v[i];
        //     i++;
        //     ptr=ptr->next;
        // }
        // return head;


        if(!head || !head->next)
            return head;

        ListNode *temp=NULL;
        ListNode *slow=head;
        ListNode *fast = head;

        while(fast && fast->next){
            temp=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        temp->next=NULL;

        ListNode *l1=sortList(head);
        ListNode *l2=sortList(slow);

        return mergelist(l1,l2);
        
    }

    ListNode *mergelist(ListNode *l1, ListNode *l2){
        ListNode *ptr=new ListNode(0);
        ListNode *curr=ptr;

        while(l1 && l2){
            if(l1->val<=l2->val){
                curr->next=l1;
                l1=l1->next;
            }
            else{
                curr->next=l2;
                l2=l2->next;
            }
            curr=curr->next;
        }

        if(l1){
            curr->next=l1;
            l1=l1->next;
        }
        if(l2){
            curr->next=l2;
            l2=l2->next;
        }

        return ptr->next;
    }
};
