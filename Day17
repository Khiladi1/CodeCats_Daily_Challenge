160. Intersection of Two Linked Lists

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    int length(ListNode *head){
        int len =0;
        while(head){
            len++;
            head=head->next;
        }
        return len;
    }

    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        // ListNode *ptr1=headA, *ptr2=headB;
        // if(headA==NULL || headB == NULL)
        // return NULL;

        // while(ptr1!=ptr2){
        //     ptr1=ptr1==NULL?headB:ptr1->next;
        //     ptr2=ptr2==NULL?headA:ptr2->next;
        // }
        // return ptr1;



        int len1=length(headA), len2=length(headB);

        if(len1>len2){
            while(len1>len2){
                headA=headA->next;
                len1--;
            }
        }
        else if(len2>len1){
            while(len2>len1){
                headB=headB->next;
                len2--;
            }
        }

        while(headA && headB){
            if(headA==headB)
            return headA;
            headA=headA->next;
            headB=headB->next;
        }
        return NULL;
    }
};


328. Odd Even Linked List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head)
        return head;
        ListNode *odd = head, *even = head->next, *headeven = head->next;
        while(odd->next && even->next){
            odd->next = odd->next->next;
            odd=odd->next;
            even->next=even->next->next;
            even=even->next;
        }
        odd->next=headeven;
        return head;
        
    }
};


