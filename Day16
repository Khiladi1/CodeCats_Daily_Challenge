20. Valid Parentheses


class Solution {
public:
    bool isValid(string s) {
       
        // stack<char> st; 
        // for(int i=0;i<s.size(); i++){
        //     char ch = s[i];
        //     if(ch == '(' || ch == '{' || ch == '[')
        //     st.push(ch);
        //     else{
        //         if(!st.empty()){
        //             char top = st.top();
        //             if((ch == ')' && top == '(') ||  (ch == '}' && top == '{') ||(ch == ']' && top == '[')){
        //                 st.pop();
        //                 }
        //                 else
        //                 return false;
        //         }
        //         else
        //         return false;
        //     }

        // }

        // return st.empty();
        
        stack<char> stk;
        for(char c: s){
            if(c == '{' || c == '(' || c == '[')
            stk.push(c);
            else{
                if( stk.empty() )
                return false;
                if(  (c==')' && stk.top() == '(') || (c==']' && stk.top() == '[') || (c=='}' && stk.top() == '{') )
                stk.pop();
                else
                return false;
            }
        }
        return stk.empty();
    }
};






5. Longest Palindromic Substring

class Solution {
public:
    void chk(int l,int r,string &s,int &max,string &ans){
        while(l>=0 && r<s.size() && s[l]==s[r]){
            l--;
            r++;
        }
        l++;
        r--;

        int a=r-l+1;
        if(a>max){
            ans=s.substr(l,a);
            max=a;
        }
    }

    string longestPalindrome(string s) {
        int n=s.size();
        int max=0;
        string ans="";

        for(int i=0;i<n;i++){

            chk(i,i,s,max,ans);
            if(i==n-1){
                break;
            }
            chk(i,i+1,s,max,ans);

            if(max==n){
                return s;
            }
        }
        return ans;
    }
};
