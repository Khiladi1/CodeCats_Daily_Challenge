237. Delete Node in a Linked List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        node->val=node->next->val;
        node->next=node->next->next;
        
    }
};





71. Simplify Path

class Solution {
public:
    string simplifyPath(string path) {
        // stack<string> st;
        // string res;
        // for(int i=0;i<path.size();i++){
        //     if(path[i]=='/')
        //     continue;
        //     string temp;

        //     while(i<path.size() && path[i]!='/'){
        //         temp+=path[i];
        //         i++;
        //     }
        //     if(temp==".")
        //     continue;
        //     else if(temp=="..")
        //     {
        //         if(!st.empty())
        //         st.pop();
        //     }
        //     else
        //     st.push(temp);
        // }

        // while(!st.empty()){
        //     res="/"+st.top()+res;
        //     st.pop();
        // }
        // return res.empty()?"/":res;



        stack<string> st;
        stringstream ss(path);
        string res,temp;

        while(getline(ss,temp,'/')){
            if(temp =="" || temp == ".")
            continue;
            else if(temp == ".."){
                if(!st.empty())
                st.pop();
            }
            else
            st.push(temp);
        }
        while(!st.empty()){
            res = "/"+st.top()+res;
            st.pop();
        }
        return res.empty()?"/":res;
        
    }
};







109. Convert Sorted List to Binary Search Tree

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head)
        return NULL;
        if(!head->next)
        return new TreeNode(head->val);

        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = NULL;

        while(fast && fast->next){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode* mid = slow;
        prev->next = NULL;

        TreeNode* root = new TreeNode(mid->val);
        root->left = sortedListToBST(head);
        root->right = sortedListToBST(mid->next);

        return root;
        
    }
};

