88. Merge Sorted Array

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // vector<int> num;
        
        // for(int i=0;i<m;i++){
        //     num.push_back(nums1[i]);

        // }
        // for(int i=0;i<n;i++){
        //     num.push_back(nums2[i]);

        // }

        // sort(num.begin(),num.end());

        // nums1.clear();

        // for(int i=0;i<num.size();i++){
        //     nums1.push_back(num[i]);
        // }

        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;
        
        while (j >= 0) {
            if (i >= 0 && nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }


    }
};





912. Sort an Array


// class Solution {
// public:
//     vector<int> mergesorted(vector<int>&arr)
//     {
//         if(arr.size()==1)
//         {
//             return arr;
//         }
//         int dividesize=arr.size()/2;
//         vector<int>merge1,merge2;
//         for(int i=0;i<dividesize;i++)
//         {
//             merge1.push_back(arr[i]);
//         }
//         for(int i=dividesize;i<arr.size();i++)
//         {
//             merge2.push_back(arr[i]);
//         }
//         merge1=mergesorted(merge1);
//         merge2=mergesorted(merge2);
//         int ptr1=0,ptr2=0,ptr3=0;
//         while(ptr3<arr.size())
//         {
//             if(ptr1==merge1.size())
//             {
//                 arr[ptr3]=merge2[ptr2];
//                 ptr2++;
//                 ptr3++;
//                 continue;
//             }
//             if(ptr2==merge2.size())
//             {
//                 arr[ptr3]=merge1[ptr1];
//                 ptr1++;
//                 ptr3++;
//                 continue;   
//             }
//             if(merge1[ptr1]<merge2[ptr2])
//             {
//                 arr[ptr3]=merge1[ptr1];
//                 ptr1++;
//                 ptr3++;
//             }
//             else
//             {
//                 arr[ptr3]=merge2[ptr2];
//                 ptr2++;
//                 ptr3++;
//             }
//         }
//         return arr;
//     }
//     vector<int> sortArray(vector<int>&nums) 
//     {
//         return mergesorted(nums);
//     }
// };


class Solution {
public:
    void insertion(vector<int> &nums){
        if(nums.size() == 0){
            return;
        }
        for(int i=1;i<nums.size();i++){
            int key = nums[i];
            int k = i-1;
            for(;k>=0;k--){
                if(key<nums[k]){
                   nums[k+1] = nums[k];
                }else{
                    break;
                }
            }
            nums[k+1] = key;
        }
    }
    void heapify(vector<int> &nums,int index){
        int i = index;
        int li = index;
        int n = nums.size();

        while(i<n){
            int left = (2*i)+1;
            int right = (2*i)+2;

            if(left < n && (nums[left]>nums[li])){
                li = left;
            }
            if(right < n && (nums[right] > nums[li])){
                li = right;
            }

            if(li == i){
                break;
            }

            swap(nums[li],nums[i]);
            i = li;
        }

    }
    void heapify1(vector<int> &nums,int index, int last){
        
        int i = index;
        int li = index;
        int n = last;

        while(i<=n){
            int left = (2*i)+1;
            int right = (2*i)+2;

            if(left < n && (nums[left]>nums[li])){
                li = left;
            }
            if(right < n && (nums[right] > nums[li])){
                li = right;
            }

            if(li == i){
                break;
            }

            swap(nums[li],nums[i]);
            i = li;
        }


    }
    void heapsort(vector<int> &nums){

        int n = nums.size();
        int start = (n/2) - 1;

        for(int i = start;i>=0;i--){
            heapify(nums,i);
        }

        int lastIndex = n-1;
        for(int i=0;i<n;i++){
             swap(nums[0],nums[lastIndex]);
             heapify1(nums,0,lastIndex--);
        }
        
    }
    vector<int> sortArray(vector<int>& nums) {
        heapsort(nums);
        return nums;
    }
};
