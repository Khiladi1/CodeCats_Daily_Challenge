234. Palindrome Linked List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode *cur=head, *prev=NULL, *next=NULL;

        while(cur){
        next=cur->next;
        cur->next=prev;
        prev=cur;
        cur=next;
        }
        return prev;
        
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)
        return true;

        ListNode *s=head, *f=head;

        while(f->next && f->next->next){
            s=s->next;
            f=f->next->next;
        }

        s->next=reverse(s->next);
        s=s->next;

        while(s){
            if(head->val!=s->val)
            return false;
            s=s->next;
            head=head->next;
        }
        return true;
    }
};






1721. Swapping Nodes in a Linked List


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int len=0; ListNode *ptr =head;
        while(ptr){
            len++;
            ptr=ptr->next;
        }

        ListNode *ptr1=head,*ptr2=head;
        
        while(len!=k){
            ptr2=ptr2->next;
            len--;
        }
        while(k>1){
            ptr1=ptr1->next;
            k--;
        }

        swap(ptr1->val,ptr2->val);

        return head;
    }
};


