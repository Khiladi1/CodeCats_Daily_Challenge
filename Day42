232. Implement Queue using Stacks


class MyQueue {
public:
    stack<int> input, output;
    MyQueue() {
        
    }
    
    void push(int x) {
        input.push(x);
    }
    
    int pop() {
        if(output.empty()){
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
        }

        int x=output.top();
        output.pop();

        return x;
        
    }
    
    int peek() {
         if(output.empty()){
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
        }

        return output.top();
        
    }
    
    bool empty() {
        return (input.empty() && output.empty());
        
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */



387. First Unique Character in a String


class Solution {
public:
    int firstUniqChar(string s) {
        // for(int i=0;i<s.size(); i++){
        //     int flag=0;
        //     for(int j=0;j<s.size();j++){
        //         if(i==j)
        //         continue;
        //         if(s[i]==s[j]){
        //         flag=1;
        //         break;
        //         }
        //     }
        //     if(!flag)
        //     return i;
        // }
        // return -1;

        unordered_map<char,int> mp;
        for(int i=0;i<s.size();i++)
        mp[s[i]]++;

        for(int i=0;i<s.size();i++){
            if(mp[s[i]]==1)
            return i;
        }
        return -1;
    }
};
