876. Middle of the Linked List


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *s= head , * f = head;

        if(!s) return head;

        while(f && f->next){
            f=f->next->next;
            s=s->next;
        }
        return s;
    }
};






2. Add Two Numbers


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *p1 = l1, *p2 = l2;
        
        ListNode *dummy = new ListNode();
        ListNode *ptr = dummy;
        int c = 0;
        
        while(p1 || p2 || c){
            int sum = 0;
            if(p1){
                sum +=p1->val;
                p1=p1->next;
                
            }
            if(p2){
                sum+=p2->val;
                p2=p2->next;
            }

            sum+=c;
            c=sum/10;
            ListNode* newnode = new ListNode(sum%10);
            ptr->next=newnode;
            ptr=ptr->next;
        }
        return dummy->next;
    }
};
