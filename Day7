31. Next Permutation

-> class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int index =-1, n=nums.size();
        for(int i = n-2 ; i >= 0 ; i--){
            if( nums[i] < nums[i+1] ){
                index = i;
                break;
            }
        }

        if(index != -1){
            for(int i=n-1; i>index;i--){
              if(nums[i]>nums[index]){   
                swap(nums[i], nums[index]);
                break;
               }
            }
        }

       
      reverse(nums.begin() + index + 1, nums.end());
        
    }
};


1460. Make Two Arrays Equal by Reversing Subarrays

->  class Solution {
public:
    bool canBeEqual(vector<int>& target, vector<int>& arr) {
        // sort(arr.begin(),arr.end());
        // sort(target.begin(), target.end());
        // for(int i=0;i<arr.size();i++){
        //     if(arr[i] != target[i]){
        //         return false;
        //     }
        // }
        // return true;
        

        multiset<int> s1,s2;

        for(auto i: arr)
        s1.insert(i);

        for(auto i: target)
        s2.insert(i);

        if(s1 == s2)
        return true;
        
        return false;
    }
};

